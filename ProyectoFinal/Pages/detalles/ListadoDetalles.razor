@page "/detalles/listadoDetalles"
@using ProyectoFinal.Data
@inject DetalleService DetalleService
@inject NavigationManager navigation
@inject IJSRuntime JsRuntime
@using Model

<h1>Listado de Detalles</h1>

<button class="btn" @onclick="()=>Editar(0)">Nuevo</button>

@if (detalles == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Fecha</th>
                <th scope="col">Tiempo</th>
                <th scope="col">Recurso</th>
                <th scope="col">Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var detalle in detalles)
            {
            <tr>
                <td scope="row">@detalle.Id_Detalle</td>
                <td scope="row">@detalle.Fecha</td>
                <td scope="row">@detalle.Tiempo</td>
                <td scope="row">@detalle.Recurso.Nombre</td>
                <td scope="row"><button class="btn" @onclick="()=>Editar(detalle.Id_Detalle)">Editar</button> <button class="btn" @onclick="()=>Borrar(detalle.Id_Detalle)">Borrar</button></td>
            </tr>
            }
        </tbody>
    </table>
}

@code {

    private List<Detalle> detalles;

    protected override async Task OnInitializedAsync()
    {
        detalles = await DetalleService.GetAll();
    }

    protected void Editar(int id)
    {
        navigation.NavigateTo("detalles/editarDetalle/" + id);
    }

    async Task Borrar(int id)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "¿Desea elimiar el detalle  seleccionado?");
        if (confirmed)
        {
            await DetalleService.Remove(id);
            detalles = await DetalleService.GetAll();
        }
    }

}
