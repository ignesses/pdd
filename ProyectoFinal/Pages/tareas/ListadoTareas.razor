@page "/tareas/listadoTareas"
@using ProyectoFinal.Data
@inject TareaService TareaService
@inject NavigationManager navigation
@inject IJSRuntime JsRuntime

<h1>Listado de Tareas</h1>

<button class="btn" @onclick="()=>Editar(0)">Nuevo</button>

@if (tareas == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Titulo</th>
                <th>Vencimiento</th>
                <th>Estimacion</th>
                <th>Recurso</th>
                <th>Estado</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tarea in tareas)
            {
            <tr>
                <td>@tarea.Id_Tarea</td>
                <td>@tarea.Titulo</td>
                <td>@tarea.Vencimiento</td>
                <td>@tarea.Estimacion</td>
                <td>@tarea.Recurso.Nombre</td>
                <td>@tarea.Estado</td>
                <td><button class="btn" @onclick="()=>Editar(tarea.Id_Tarea)">Editar</button> <button class="btn" @onclick="()=>Borrar(tarea.Id_Tarea)">Borrar</button></td>
            </tr>
            }
        </tbody>
    </table>
}

@code {

    private List<Tarea> tareas;

    protected override async Task OnInitializedAsync()
    {
        tareas = await TareaService.GetAll();
    }

    protected void Editar(int id)
    {
        navigation.NavigateTo("tareas/editarTarea/" + id);
    }

    async Task Borrar(int id)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "¿Desea eliminar la tarea seleccionada?");
        if (confirmed)
        {
            await TareaService.Remove(id);
            tareas = await TareaService.GetAll();
        }
    }

}